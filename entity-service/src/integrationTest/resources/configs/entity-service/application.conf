main.class = org.hypertrace.entity.service.EntityService
service.name = entity-service
service.port = 50061
service.admin.port = 50062
entity.service.config = {
  document.store {
    dataStoreType = mongo
    appName = entity-service-integration-test
    maxPoolSize = 10
    mongo {
      database = default_db
      endpoints = [
        {
          host = localhost
          host = ${?MONGO_HOST}
          port = 37017
          port = ${?MONGO_PORT}
        }
      ]
    }
  }

  publish.change.events = false
}

entity.query.service = {
  response.chunk.size = 2
  max.string.length.for.update = 5000
}
eqs.change.notification.enabled.entity.types = ["*"]
attribute.service.config = {
  host = localhost
  host = ${?ATTRIBUTE_SERVICE_HOST_CONFIG}
  port = 9112
}

entity.service.idAttributeMap = [
  {
    scope = API
    attribute = API.id
  },
  {
    scope = SERVICE
    attribute = SERVICE.id
  },
  {
    scope = BACKEND
    attribute = BACKEND.id
  },
  {
    scope = DOMAIN
    attribute = DOMAIN.id
  }
]

# This should be completely driven based on config given in app packaging.
entity.service.attributeMap = [
  {
    "scope": "API",
    "name": "API.id",
    "subDocPath": "entityId"
  },
  {
    "scope": "API",
    "name": "API.name",
    "subDocPath": "entityName"
  },
  {
    "scope": "API",
    "name": "API.apiType",
    "subDocPath": "attributes.API_TYPE"
  },
  {
    "scope": "API",
    "name": "API.httpMethod",
    "subDocPath": "attributes.http_method"
  },
  {
    "scope": "API",
    "name": "API.httpUrl",
    "subDocPath": "attributes.http_url"
  },
  {
    "scope": "API",
    "name": "API.serviceId",
    "subDocPath": "attributes.SERVICE_ID"
  },
  {
    "scope": "API",
    "name": "API.createdTime",
    "subDocPath": "createdTime"
  },
  {
    "scope": "API",
    "name": "API.apiDiscoveryState",
    "subDocPath": "attributes.api_discovery_state"
  },
  {
    "scope": "API",
    "name": "API.labels",
    "subDocPath": "attributes.labels"
  },
  {
    "scope": "API",
    "name": "API.isLatest",
    "subDocPath": "attributes.is_latest"
  },
  {
    "scope": "API",
    "name": "API.stringMapAttr",
    "subDocPath": "attributes.stringMapAttr"
  },
  {
    "scope": "SERVICE",
    "name": "SERVICE.id",
    "subDocPath": "entityId"
  },
  {
    "scope": "SERVICE",
    "name": "SERVICE.name",
    "subDocPath": "entityName"
  },
  {
    "scope": "SERVICE",
    "name": "SERVICE.createdTime",
    "subDocPath": "createdTime"
  },
  {
    "scope": "SERVICE",
    "name": "SERVICE.service_type",
    "subDocPath": "attributes.service_type"
  },
  {
    "scope": "SERVICE",
    "name": "SERVICE.multiValueAttribute",
    "subDocPath": "attributes.multiValueAttribute"
  },
]

event.store {
  type = kafka
  bootstrap.servers = "localhost:9092"
  entity.change.events.producer {
    topic.name = entity-change-events
    bootstrap.servers = "localhost:9092"
    key.serializer = io.confluent.kafka.serializers.protobuf.KafkaProtobufSerializer
    value.serializer = io.confluent.kafka.serializers.protobuf.KafkaProtobufSerializer
    schema.registry.url = "http://localhost:8081"
  }
}
